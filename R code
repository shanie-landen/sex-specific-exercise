#load libraries
library(data.table)
library(dplyr)         # data.frame operations
library(tidyr)
library(purrr)         # list/vecgtor munging
library(lubridate)     # date/time manipulation
library(countrycode)   # turn country codes into names 
library(ggplot2)       #
library(scales)        # working with ggplot2 for label formatting
library(gridExtra)     # working with ggplots for arranging plots
library(ggthemes)      # clean theme for ggplot2
library(viridis)       # color palette
library(DT)            # prettier data.frame output
library(superheat)
library(plyr)

#proteomics analysis 
proteomics=read.xlsx("proteomics_data_updated.xlsx",rowNames=TRUE)
phenotable_proteomics=read.delim("phenodata_proteomics2023.txt")
#sex and timepoint as factors
phenotable_proteomics$sSex=factor(phenotable_proteomics$Sex)
phenotable_proteomics$Timepoint=factor(phenotable_proteomics$Timepoint,levels=c("PRE","4WP"))
#linear model
design=model.matrix(~Timepoint+Age_PRE+sex+baselineVO2,
                    phenotable_proteomics)

corfit <- duplicateCorrelation(proteomics,
                               design,
                               block = phenotable_proteomics$Participant)
fit1 = lmFit(proteomics,
             design,
             block=phenotable_proteomics$Participant,
             correlation=corfit$consensus.correlation)
fit2 <- eBayes(fit1)

results<- limma::topTable(fit2,
                               coef="sexmale",
                               number=Inf,
                               p.value=1)

#volcano plot
Proteins1=rownames(results)
results$protein=rownames(results)
all_results = mutate(results, sig=ifelse(results$PI<0.005, "Sig", "Not Sig"))
all_results = mutate(all_results, coef=ifelse(all_results$logFC<0, "neg", "pos"))
all_results = mutate(all_results, color=ifelse(all_results$PI>0.005,"black",ifelse(all_results$PI<0.005&all_results$coef=="neg","blue","red")))#for some reason worked this way and not when i did adjp> so above two lines are kind of extra but helped to make sure it was correct
all_results=data.frame(Proteins1,all_results)
all_results$color<-as.factor(all_results$color)
p=ggplot(all_results, aes(logFC, -log10(P.Value))) +
  geom_point(aes(col=color),size=0.3)+
  scale_color_manual(values=c("black","#1F78B4", "#E31A1C"))+
  labs(x="Protein logFC associated with sex",y="-log10(p-value)")+
  theme_minimal()+
  theme(legend.position = "none")+
  #xlim(-3, 3)+
  #ylim(0,8)+
  coord_cartesian(clip = 'off')+
  ggrepel::geom_text_repel(data=all_results[all_results$sig=="Sig",],
                           aes(label=protein),
                           size=2)

#boxplots of proteins
proteomics_t=t(proteomics)
phenos_prot=cbind(phenotable_proteomics,proteomics_t)
rownames(phenos_prot)=colnames(proteomics)
phenos_prot$sex=factor(phenos_prot$sex, levels=c("male","female"))
phenos_prot$Timepoint=factor(phenos_prot$Timepoint, levels=c("PRE","4WP"))

b=ggboxplot(data=phenos_prot, x='Timepoint', y='CCS',
            xlab="Timepoint", ylab='CCS protein expression',
            facet.by = "sex",
            panel.labs =list(sex = c("Males", "Females")),
            fill="sex",
            panel.labs.font = list(size = 12))+
  theme(axis.text.x = element_text(size=12),
        axis.text.y = element_text(size=12))+
  font("xy", size=12)+
  rremove("legend")+
  scale_fill_brewer(palette = "Set2") 

#boxplot of PRE samples only
PRE=phenos_prot[phenos_prot$Timepoint=="PRE",]
b=ggboxplot(data=PRE, x='sex', y="ACTN3",
            xlab="", ylab='ACTN3 protein expression',
            fill="sex",
            panel.labs.font = list(size = 12))+
  theme(axis.text.x = element_text(size=12),
        axis.text.y = element_text(size=12))+
  scale_x_discrete(labels = c("Males", "Females"))+
  font("xy", size=12)+
  rremove("legend")+
  scale_fill_brewer(palette = "Set2") 
  #boxplot of top protein before and after training, and also with z score
proteins_t=data.frame(t(proteomics))
prots_phenos=cbind(pheno_toUse,proteins_t)
rownames(prots_phenos)=colnames(proteomics)

#boxplot faceted by sex and timepoint
b=ggboxplot(data=prots_phenos, x='Timepoint', y='SIRT3',
            xlab="Timepoint", ylab='Protein expression SIRT3 (AU)',
            facet.by = "Sex",
            panel.labs =list(Sex = c("Males", "Females")),
            fill="Sex",
            panel.labs.font = list(size = 12))+
  theme(axis.text.x = element_text(size=12),
        axis.text.y = element_text(size=12))+
  font("xy", size=12)+
  rremove("legend")+
  scale_fill_brewer(palette = "Set2") 


#dotplot baseline fitness and protein
prots_phenos_PRE=prots_phenos[prots_phenos$Timepoint=="PRE",]
q=ggplot(prots_phenos_PRE, aes(zscore, CKB))+ 
  geom_point(aes(col=Sex),size=1)+
  scale_color_manual(values=c("#66C2A5","#FC8D62"))+
  labs(x="Fitness z score",y="Protein expression CKB (AU)")+
  theme_minimal()

#heatmap of top 30 proteins
pro_sextime=proteomics[rownames(proteomics) %in% rownames(results_sextime_final_top30),]
#color by sex
participant_sex=pheno_toUse$Sex
time=pheno_toUse$Timepoint
color_vector <- revalue(participant_sex,
                        c("Female"="#F8766D","Male"="#00BFC4"))
pro_sextime_sc_t=data.frame(t(scale(t((pro_sextime)))))
females_prots=data.frame(t(pro_sextime_sc_t[,colnames(pro_sextime_sc_t) %like% "FI"]))
males_prots=data.frame(t(pro_sextime_sc_t[,colnames(pro_sextime_sc_t) %like% "SG"]))
females_prots_t=data.frame(t(females_prots))
male_prots_t=data.frame(t(males_prots))
time_F=pheno_toUse[pheno_toUse$Sex=="Female","Timepoint"]
time_M=pheno_toUse[pheno_toUse$Sex=="Male","Timepoint"]
superheatfemales=superheat(females_prots_t,
                           bottom.label.text.angle = 0,
                           bottom.label.text.size = 4,
                           #bottom.label.text.alignment = "right",
                           pretty.order.cols = TRUE,
                           pretty.order.rows = TRUE,
                           left.label.size = 0.2,
                           bottom.label.size = 0.03,
                           left.label.text.angle =0,
                           heat.pal = c("#b35806", "white", "#542788"),
                           membership.cols=time_F,n.clusters.cols = 2,
                           title="Females"
)

prespecified_protein_order=c("MBP",
                             "RAB24",
                             "SIRT3",
                             "TMEM11",
                             "GORASP2",
                             "UBXN1",
                             "AGO2",
                             "LRRC39",
                             "SEC13",
                             "CPNE3",
                             "PRDX4",
                             "EPS15L1",
                             "RSL1D1",
                             "CTNND1",
                             "LBR",
                             "UBE2O",
                             "MSRA",
                             "TRA2B",
                             "HOOK3",
                             "NUMA1",
                             "TMED9",
                             "CBX1",
                             "CCAR2",
                             "AGMAT",
                             "SNRPD2",
                             "NMT1",
                             "SIAE",
                             "TARDBP",
                             "MAPRE1",
                             "MRPL41")
#prespecified_protein_order=rev(prespecified_protein_order)

male_prots_t=male_prots_t[match(prespecified_protein_order,rownames(male_prots_t)),]
superheat(male_prots_t,
          bottom.label.text.angle = 0,
          bottom.label.text.size = 4,
          #bottom.label.text.alignment = "right",
          pretty.order.cols = TRUE,
          pretty.order.rows = FALSE,
          left.label.size = 0.2,
          bottom.label.size = 0.03,
          left.label.text.angle =0,
          heat.pal = c("#b35806", "white", "#542788"),
          membership.cols=time_M,n.clusters.cols = 2,
          #order.rows = order(prespecified_protein_order),
          title="Males"
)
dev.off()


#compare FT exercise specific proteins to sex-specific training proteins
#fisher and 1000 perm
singlefiberS=read.xlsx("Supplemental Data 9_Fiber Type specific differences_interaction.xlsx",sheet=1)
singlefiberS=singlefiberS[singlefiberS$Significance.score<0.05,c("Significance.score","Gene.names")]
singlefibers_Sun=unique(unlist(strsplit(as.character(singlefiberS$Gene.names),split=";"))) #there were repeats because after ; there was a space..so remove white space
overlapping_FT_sextime=results_sextime_final[rownames(results_sextime_final) %in% singlefibers_Sun,] #8

samples_count=c()
for (i in 1:10000){
  sampling=results_sextime_old[sample(rownames(results_sextime_old), 195),] #pick random 195
  sampling=sampling[rownames(sampling)%in% singlefibers_Sun, ]
  nrow_sample1=nrow(sampling)
  
  samples_count=rbind(samples_count,nrow_sample1)
}
prop.table(table(samples_count>8))

#DNA methylation analysis


